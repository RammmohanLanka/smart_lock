
module lkjh(b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,reset,clk,out);
input b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,reset;
input clk;
output out;
reg out;


parameter S_reset=3'd0, S_1=3'd1, S_2=3'd2, S_3=3'd3,S_4=3'd4,S_5=3'd5;
reg [2:0] currentstate,nextstate;

always@(reset,b0,b1,b2,b3,b4,b5,b6,b7,b8,b9)
begin
	if(reset) nextstate=S_reset;
	else case(currentstate)
		S_reset:	begin
					out=1'b0;
					if(b2) nextstate=S_1;
					else if(b0||b1||b4||b3||b5||b6||b7||b8||b9)  nextstate=S_5;
					else nextstate=S_reset;
				end
		S_1:	begin
				out=1'b0;
				if(b4) nextstate=S_2;
				else if(b0||b1||b2||b3||b5||b6||b7||b8||b9)  nextstate=S_5;
				else   nextstate=S_1;
			end
		S_2:	begin
				out=1'b0;
				if(b7) nextstate=S_3;
				else if(b0||b1||b2||b3||b5||b6||b4||b8||b9)  nextstate=S_5;
				else  nextstate=S_2;	
			end
		S_3:	begin
				out=1'b0;
				if(b9) nextstate=S_4;
				else if(b0||b1||b2||b3||b5||b6||b7||b8||b4)  nextstate=S_5;
				else  nextstate=S_3;
			end
		S_4:    begin	
				out=1'b1;
				nextstate=S_4;
			end
		S_5:	begin
				out=1'b0;
				nextstate=S_5;
			end
		default: begin
				nextstate=S_reset;
	   		 end	
		endcase
end

always@(posedge clk) currentstate<=nextstate;




endmodule

		




module test_lkjh;
reg b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,reset,clk;
wire out;
lkjh maa(b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,reset,clk,out);

initial
	begin

	#7  b0=1'b0;b1=1'b0;b2=1'b0;b3=1'b0;b4=1'b0;b5=1'b0;b6=1'b0;b7=1'b0;b8=1'b0;b9=1'b0;
	#10  b2=1'b1;
	#10  b2=1'b0;
	#10  b4=1'b1;
	#10  b4=1'b0;
	#10  b7=1'b1;
	#10  b7=1'b0;
	#10  b9=1'b1;
	#10  b9=1'b0;
	end

initial
begin
	reset=1'b0;
	clk=1'b0;
	forever #5 clk=~clk;
end
endmodule





